write.csv(EFishes.count.site.CPUE, "Fish CPUE table by site type.csv")
#### Summary statistics on CPUE####
CPUE.stats<-ddply(EFishes.count.station.CPUE, .(Site.Type), .fun= summarise,
cpue.max=max(station.cpue), cpue.min=min(station.cpue), cpue.mean=mean(station.cpue))
#### Make Figure 2 total biomass####
#calculate number of fish caught per each Run ID X year X species
EFishes.individual.biomass<-ddply(EFishes.individual, .(Run_UID, StartDate, Species, StationName, Site.Type, Duration), .fun= summarise, biomass = sum(Weight))
#merge batch data
EFishes.batch.biomass<-EFishes.batch[,c("Run_UID", "StartDate", "StationName", "Species", "Site.Type", "Duration", "biomass")]
EFishes.sum.biomass<-rbind(EFishes.individual.biomass, EFishes.batch.biomass)
#sum batch data to individual data
EFishes.sum.biomass<-ddply(EFishes.sum.biomass, .(Run_UID, StartDate, StationName, Species,Site.Type, Duration), .fun= summarise,
total = sum(biomass))
#sum across species and duration for each site x year
EFishes.biomass.station.total<-ddply(EFishes.sum.biomass, .(StartDate, Site.Type, StationName), .fun= summarise,
station.catch = sum(total), station.duration=sum(Duration))
#add zero catch data
EFishes.biomass.station.total<-merge(EFishes.biomass.station.total, NoCatch, by=c("StartDate","Site.Type","StationName"))
EFishes.biomass.station.total<-ddply(EFishes.biomass.station.total, .(), .fun= transform, complete.duration = (station.duration+NoCatch.Duration))
#change g to kg
EFishes.biomass.station.total<-ddply(EFishes.biomass.station.total, .(), .fun= transform,
station.catch.kg = station.catch/1000)
#get cpue for each site
EFishes.biomass.station.CPUE<-ddply(EFishes.biomass.station.total, .(StartDate, Site.Type, StationName), .fun= summarise,
station.cpue=station.catch.kg/complete.duration)
#get mean and variance for site type
EFishes.biomass.site.CPUE<-ddply(EFishes.biomass.station.CPUE, .(StartDate, Site.Type), .fun= summarise,
site.cpue=mean(station.cpue), SE=sd(station.cpue)/sqrt(length(station.cpue)))
#plot figure 2
Figure.2<-ggplot(EFishes.biomass.site.CPUE, aes(x = StartDate, y = site.cpue))+
geom_point()+
facet_wrap(~Site.Type, ncol=1, scales = "free_y")+
geom_errorbar(aes(ymin=site.cpue-SE, ymax=site.cpue+SE))+
xlab("Year")+
ylab("Mean biomass CPUE")+
theme_classic()+
theme(panel.border=element_rect(colour="black",fill=NA))+
stat_smooth(colour="black",se=FALSE, size=0.5, method = "lm")+
scale_x_continuous(breaks = round(seq(min(EFishes.sum.biomass$StartDate), max(EFishes.sum.biomass$StartDate), by = 2),1))+
theme(strip.background = element_blank())+
theme(axis.text.x = element_text(size=8))
plot(Figure.2)
#### Write Figure 2 table####
write.csv(EFishes.biomass.site.CPUE, "Fish biomass table by site type.csv")
View(EFishes.sum.biomass)
#### Load packages ####
library(plyr)
library(ggplot2)
library(lubridate)
library(tidyr)
library(vegan)
#### Clean data ####
#read in data
Fishes.individual<-read.csv("Individual.csv")
#convert date to year
Fishes.individual$StartDate <- ymd(Fishes.individual$StartDate)
Fishes.individual$StartDate <- year(Fishes.individual$StartDate)
#subset electrofishing data
EFishes.individual<-Fishes.individual[Fishes.individual$SamplingTechnique == "Boat Electrofisher",]
EFishes.individual$NativeSpecies<-droplevels(EFishes.individual$NativeSpecies)
EFishes.individual$TrophicGroup<-droplevels(EFishes.individual$TrophicGroup)
EFishes.individual$Species<-droplevels(EFishes.individual$Species)
#remove #N/As in Duration
EFishes.individual <- EFishes.individual[!EFishes.individual$Duration %in% c("#N/A"), ]
EFishes.individual$Duration<-droplevels(EFishes.individual$Duration)
#make Duration number
EFishes.individual$Duration <- as.numeric(as.character(EFishes.individual$Duration))
#only keep transects between 400-1200s
EFishes.individual<-EFishes.individual[EFishes.individual$Duration>=400,]
EFishes.individual<-EFishes.individual[EFishes.individual$Duration<=1200,]
#remove -99 and 0 in Weight
EFishes.individual <- EFishes.individual[!EFishes.individual$Weight%in% c("-99", "0"), ]
#read in batch data
Fishes.batch<-read.csv("Batch.csv")
#subset electrofishing data
EFishes.batch<-Fishes.batch[Fishes.batch$SamplingTechnique == "Boat Electrofisher",]
EFishes.batch$SamplingTechnique<-droplevels(EFishes.batch$SamplingTechnique)
#convert date to year
EFishes.batch$StartDate <- ymd(EFishes.batch$StartDate)
EFishes.batch$StartDate <- year(EFishes.batch$StartDate)
#remove #N/As and zeros from TotalWeight and NumIndividuals
EFishes.batch <- EFishes.batch[!EFishes.batch$TotalWeight%in% c("-99", "0", "#N/A"), ]
EFishes.batch$TotalWeight<-droplevels(EFishes.batch$TotalWeight)
EFishes.batch <- EFishes.batch[!EFishes.batch$NumIndividuals%in% c("-99", "0", "#N/A"), ]
EFishes.batch$NumIndividuals<-droplevels(EFishes.batch$NumIndividuals)
#make TotalWeight, NumIndividuals and Duration number
EFishes.batch$TotalWeight <- as.numeric(as.character(EFishes.batch$TotalWeight))
EFishes.batch$NumIndividuals <- as.numeric(as.character(EFishes.batch$NumIndividuals))
EFishes.batch$Duration <- as.numeric(as.character(EFishes.batch$Duration))
#only keep transects between 400-1200s
EFishes.batch<-EFishes.batch[EFishes.batch$Duration>=400,]
EFishes.batch<-EFishes.batch[EFishes.batch$Duration<=1200,]
#keep only relevant columns
EFishes.batch<-EFishes.batch[,c("Run_UID", "StartDate", "StationName", "Species", "StationType", "Duration", "NumIndividuals", "TotalWeight", "TrophicGroup")]
colnames(EFishes.batch)[5] <- "Site.Type"
colnames(EFishes.batch)[7] <- "count"
colnames(EFishes.batch)[8] <- "biomass"
#### Make Figure 1 total catch####
#calculate number of each species caught for each run ID x year X species
EFishes.individual.count.all<-ddply(EFishes.individual, .(Run_UID, StartDate, StationName, Species, Site.Type, Duration, NativeSpecies, TrophicGroup), .fun= summarise, count = length(Run_UID))
#keep only relevant columns
EFishes.individual.count<-EFishes.individual.count.all[,c("Run_UID", "StartDate", "StationName", "Species", "Site.Type", "Duration", "count", "TrophicGroup")]
#keep only relevant columns
EFishes.batch.count<-EFishes.batch[,c("Run_UID", "StartDate", "StationName", "Species", "Site.Type", "Duration", "count","TrophicGroup")]
#merge batch data
EFishes.count<-rbind(EFishes.individual.count, EFishes.batch.count)
#sum batch data to individual data
EFishes.sum.count<-ddply(EFishes.count, .(Run_UID, StartDate, StationName, Species, Site.Type, Duration, TrophicGroup), .fun= summarise, total = sum(count))
View(EFishes.sum.count)
#go from long to wide
Efishes.slim<-EFishes.sum.count[,c("Run_UID","StartDate", "StationName","Site.Type", "Species", "total")]
EFishes.wide<-spread(Efishes.slim, Species, total)
#replace NAs with zeros
EFishes.wide[is.na(EFishes.wide)] <- 0
#calculate Simpsons diversity for each site Run_UID
simpsons.run<-diversity(EFishes.wide[,5:64], index = "invsimpson")
View(simpsons.run)
#make data frame with site information and simpson's values
Efishes.simpsons.run<-cbind(EFishes.wide[,1:4],simpsons.run)
View(Efishes.simpsons.run)
#calculate average by site
Efishes.simpsons.site<-ddply(Efishes.simpsons.run, .(StartDate, StationName, Site.Type), .fun= summarise,
simpsons.site = mean(simpsons.run))
#calculate average by site type
Efishes.simpsons.site.type<-ddply(Efishes.simpsons.site, .(StartDate, Site.Type), .fun= summarise, simpsons.site.type = mean(simpsons.site), SE=sd(simpsons.site)/sqrt(length(simpsons.site)))
#plot Figure 4
Figure.4<-ggplot(Efishes.simpsons.site.type, aes(x = StartDate, y = simpsons.site.type))+geom_point()+
geom_errorbar(aes(ymin=simpsons.site.type-SE, ymax=simpsons.site.type+SE))+
xlab("Year")+ylab("Mean Simpson's diversity index")+
facet_wrap(~Site.Type, ncol=1, scales = "free_y")+
theme_classic()+theme(panel.border=element_rect(colour="black",fill=NA))+
scale_x_continuous(breaks = round(seq(min(Efishes.simpsons.site.type$StartDate),max(Efishes.simpsons.site.type$StartDate),by = 2),1))+
theme(strip.background = element_blank())+theme(axis.text.x = element_text(size=8))+
stat_smooth(colour="black",se=FALSE, size=0.5, method = "lm")
plot(Figure.4)
View(EFishes.wide)
#### Load packages ####
library(plyr)
library(ggplot2)
library(lubridate)
library(tidyr)
library(vegan)
#### Clean data ####
#read in data
Fishes.individual<-read.csv("Individual.csv")
#convert date to year
Fishes.individual$StartDate <- ymd(Fishes.individual$StartDate)
Fishes.individual$StartDate <- year(Fishes.individual$StartDate)
#subset electrofishing data
EFishes.individual<-Fishes.individual[Fishes.individual$SamplingTechnique == "Boat Electrofisher",]
EFishes.individual$NativeSpecies<-droplevels(EFishes.individual$NativeSpecies)
EFishes.individual$TrophicGroup<-droplevels(EFishes.individual$TrophicGroup)
EFishes.individual$Species<-droplevels(EFishes.individual$Species)
#remove #N/As in Duration
EFishes.individual <- EFishes.individual[!EFishes.individual$Duration %in% c("#N/A"), ]
EFishes.individual$Duration<-droplevels(EFishes.individual$Duration)
#make Duration number
EFishes.individual$Duration <- as.numeric(as.character(EFishes.individual$Duration))
#only keep transects between 400-1200s
EFishes.individual<-EFishes.individual[EFishes.individual$Duration>=400,]
EFishes.individual<-EFishes.individual[EFishes.individual$Duration<=1200,]
#remove -99 and 0 in Weight
EFishes.individual <- EFishes.individual[!EFishes.individual$Weight%in% c("-99", "0"), ]
#read in batch data
Fishes.batch<-read.csv("Batch.csv")
#subset electrofishing data
EFishes.batch<-Fishes.batch[Fishes.batch$SamplingTechnique == "Boat Electrofisher",]
EFishes.batch$SamplingTechnique<-droplevels(EFishes.batch$SamplingTechnique)
#convert date to year
EFishes.batch$StartDate <- ymd(EFishes.batch$StartDate)
EFishes.batch$StartDate <- year(EFishes.batch$StartDate)
#remove #N/As and zeros from TotalWeight and NumIndividuals
EFishes.batch <- EFishes.batch[!EFishes.batch$TotalWeight%in% c("-99", "0", "#N/A"), ]
EFishes.batch$TotalWeight<-droplevels(EFishes.batch$TotalWeight)
EFishes.batch <- EFishes.batch[!EFishes.batch$NumIndividuals%in% c("-99", "0", "#N/A"), ]
EFishes.batch$NumIndividuals<-droplevels(EFishes.batch$NumIndividuals)
#make TotalWeight, NumIndividuals and Duration number
EFishes.batch$TotalWeight <- as.numeric(as.character(EFishes.batch$TotalWeight))
EFishes.batch$NumIndividuals <- as.numeric(as.character(EFishes.batch$NumIndividuals))
EFishes.batch$Duration <- as.numeric(as.character(EFishes.batch$Duration))
#only keep transects between 400-1200s
EFishes.batch<-EFishes.batch[EFishes.batch$Duration>=400,]
EFishes.batch<-EFishes.batch[EFishes.batch$Duration<=1200,]
#keep only relevant columns
EFishes.batch<-EFishes.batch[,c("Run_UID", "StartDate", "StationName", "Species", "StationType", "Duration", "NumIndividuals", "TotalWeight", "TrophicGroup")]
colnames(EFishes.batch)[5] <- "Site.Type"
colnames(EFishes.batch)[7] <- "count"
colnames(EFishes.batch)[8] <- "biomass"
#### Make Figure 1 total catch####
#calculate number of each species caught for each run ID x year X species
EFishes.individual.count.all<-ddply(EFishes.individual, .(Run_UID, StartDate, StationName, Species, Site.Type, Duration, NativeSpecies, TrophicGroup), .fun= summarise, count = length(Run_UID))
#keep only relevant columns
EFishes.individual.count<-EFishes.individual.count.all[,c("Run_UID", "StartDate", "StationName", "Species", "Site.Type", "Duration", "count", "TrophicGroup")]
#keep only relevant columns
EFishes.batch.count<-EFishes.batch[,c("Run_UID", "StartDate", "StationName", "Species", "Site.Type", "Duration", "count","TrophicGroup")]
#merge batch data
EFishes.count<-rbind(EFishes.individual.count, EFishes.batch.count)
#sum batch data to individual data
EFishes.sum.count<-ddply(EFishes.count, .(Run_UID, StartDate, StationName, Species, Site.Type, Duration, TrophicGroup), .fun= summarise, total = sum(count))
#sum across species and duration for each site x year
EFishes.count.station.total<-ddply(EFishes.sum.count, .(StartDate, Site.Type, StationName), .fun= summarise,
station.catch = sum(total), station.duration=sum(Duration))
#add zero catch data
NoCatch<-read.csv("NoCatch.csv")
NoCatch<-ddply(NoCatch, .(StartDate, Site.Type, StationName), .fun=summarise, NoCatch.Site.Duration=sum(NoCatch.Duration))
EFishes.count.station.total<-merge(EFishes.count.station.total, NoCatch, by=c("StartDate","Site.Type","StationName"), all.y = T, all.x = T)
EFishes.count.station.total[is.na(EFishes.count.station.total)] <- 0
#get complete duration
EFishes.count.station.total<-ddply(EFishes.count.station.total, .(), .fun= transform, complete.duration=(station.duration+NoCatch.Site.Duration))
#get cpue for each site
EFishes.count.station.CPUE<-ddply(EFishes.count.station.total, .(StartDate, Site.Type, StationName), .fun= summarise, station.cpue=station.catch/complete.duration)
#get mean and variance for site type
EFishes.count.site.CPUE<-ddply(EFishes.count.station.CPUE, .(StartDate, Site.Type), .fun= summarise,
site.cpue=mean(station.cpue), SE=sd(station.cpue)/sqrt(length(station.cpue)))
#plot figure 1
Figure.1<-ggplot(EFishes.count.site.CPUE, aes(x = StartDate, y = site.cpue))+geom_point()+facet_wrap(~Site.Type, ncol = 1, scales = "free_y")+
xlab("Year")+ylab("CPUE")+
theme_classic()+
theme(panel.border=element_rect(colour="black",fill=NA))+
geom_errorbar(aes(ymin=site.cpue-SE,ymax=site.cpue+SE))+
stat_smooth(colour="black",se=FALSE, size=0.5, method = "lm")+
scale_x_continuous(breaks = round(seq(min(EFishes.sum.count$StartDate), max(EFishes.sum.count$StartDate), by = 2),1))+
theme(strip.background = element_blank())+theme(axis.text.x = element_text(size=8))
plot(Figure.1)
#### Make Figure 4 Simpsons Diversity Index####
#go from long to wide
Efishes.slim<-EFishes.sum.count[,c("Run_UID","StartDate", "StationName","Site.Type", "Species", "total")]
EFishes.wide<-spread(Efishes.slim, Species, total)
#replace NAs with zeros
EFishes.wide[is.na(EFishes.wide)] <- 0
#calculate Simpsons diversity for each site Run_UID
simpsons.run<-diversity(EFishes.wide[,5:67], index = "invsimpson")
#make data frame with site information and simpson's values
Efishes.simpsons.run<-cbind(EFishes.wide[,1:4],simpsons.run)
#calculate average by site
Efishes.simpsons.site<-ddply(Efishes.simpsons.run, .(StartDate, StationName, Site.Type), .fun= summarise,
simpsons.site = mean(simpsons.run))
#calculate average by site type
Efishes.simpsons.site.type<-ddply(Efishes.simpsons.site, .(StartDate, Site.Type), .fun= summarise, simpsons.site.type = mean(simpsons.site), SE=sd(simpsons.site)/sqrt(length(simpsons.site)))
#plot Figure 4
Figure.4<-ggplot(Efishes.simpsons.site.type, aes(x = StartDate, y = simpsons.site.type))+geom_point()+
geom_errorbar(aes(ymin=simpsons.site.type-SE, ymax=simpsons.site.type+SE))+
xlab("Year")+ylab("Mean Simpson's diversity index")+
facet_wrap(~Site.Type, ncol=1, scales = "free_y")+
theme_classic()+theme(panel.border=element_rect(colour="black",fill=NA))+
scale_x_continuous(breaks = round(seq(min(Efishes.simpsons.site.type$StartDate),max(Efishes.simpsons.site.type$StartDate),by = 2),1))+
theme(strip.background = element_blank())+theme(axis.text.x = element_text(size=8))+
stat_smooth(colour="black",se=FALSE, size=0.5, method = "lm")
plot(Figure.4)
write.csv(Efishes.simpsons.site.type, "Inverse SDI.csv")
####Swedish temperature and precipitation trends
#set up libraries
library(lubridate)
library(plyr)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(tidyr)
library(zoo)
library(data.table)
#### prep data ####
#set working directory
setwd("~/Box Sync/Post-Doc/Swedish plants")
#read in data
TempPrecip<-read.csv("TempPrecipAvg.csv", stringsAsFactors = FALSE)
#convert blank precipitation to 0
TempPrecip$Precipitation[TempPrecip$Precipitation==""] <- 0
#convert n/a to NA
TempPrecip[TempPrecip == "n/a" ] <- NA
#convert odd entries to NA
TempPrecip[TempPrecip == "." ] <- NA
TempPrecip[TempPrecip == "?" ] <- NA
#coerce factors to numbers
TempPrecip$Precipitation <- as.numeric(as.character(TempPrecip$Precipitation))
#code in date
TempPrecip$Date <- TempPrecip$Time
TempPrecip$Time <- ymd(TempPrecip$Time)
TempPrecip$Year <- year(TempPrecip$Time)
TempPrecip$Month <- month(TempPrecip$Time)
TempPrecip$Day <- day(TempPrecip$Time)
#### growing season week #####
#get rolling average temp for each week in data set where Day 1 is January 1, 1913
#keep relevant columns
TempPrecip<-TempPrecip[,c("Time", "Temp_avg", "Year")]
#make new "week" column
TempPrecipWeek<-rep(1:5416, each=7)
TempPrecipWeek<-TempPrecipWeek[1:37910]
TempPrecip$Week<-TempPrecipWeek
#take mean by week
TempPrecipMeanWeek<-ddply(TempPrecip, .(Year, Week), .fun= summarise, meanweektemp=mean(Temp_avg))
#determine if week temp is above zero
TempPrecipMeanWeek<-ddply(TempPrecipMeanWeek, .(), .fun= transform, positive = ifelse(meanweektemp> 0,"Y","N"))
#count how many weeks per year were greater than zero
TempPrecipWeekGS<-ddply(TempPrecipMeanWeek, .(Year), .fun= summarize, growweeks = length(positive[positive=="Y"]))
#plot time series
Figure.7<-ggplot(TempPrecipWeekGS, aes(x = Year, y = growweeks))+geom_point()+
xlab("Year")+ylab("Number of weeks with mean positive temperatures")+
theme_classic()+stat_smooth(colour="red",se=FALSE, size=0.5, method = "lm")
Figure.7
####Swedish temperature and precipitation trends
#set up libraries
library(lubridate)
library(plyr)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(tidyr)
library(zoo)
library(data.table)
#### prep data ####
#set working directory
setwd("~/Box Sync/Post-Doc/Swedish plants")
TempPrecip<-read.csv("TempPrecipAvg.csv", stringsAsFactors = FALSE)
View(TempPrecip)
#convert blank precipitation to 0
TempPrecip$Precipitation[TempPrecip$Precipitation==""] <- 0
#convert n/a to NA
TempPrecip[TempPrecip == "n/a" ] <- NA
#convert odd entries to NA
TempPrecip[TempPrecip == "." ] <- NA
TempPrecip[TempPrecip == "?" ] <- NA
#coerce factors to numbers
TempPrecip$Precipitation <- as.numeric(as.character(TempPrecip$Precipitation))
#code in date
TempPrecip$Date <- TempPrecip$Time
TempPrecip$Time <- ymd(TempPrecip$Time)
TempPrecip$Year <- year(TempPrecip$Time)
TempPrecip$Month <- month(TempPrecip$Time)
TempPrecip$Day <- day(TempPrecip$Time)
View(TempPrecip)
TempPrecip$Week<-week(TempPrecip$Day)
TempPrecip$Week<-week(TempPrecip$Time)
#get length of growing season by month and year
Growing.month.season<-ddply(Temp.pos, .(Year, Month), .fun= summarise, length=length(Temp_avg))
Growing.year.season<-ddply(Growing.month.season, .(Year), .fun= summarise, length.year=sum(length))
Growing.season.month.plot<-ggplot(Growing.month.season, aes(x = Year, y = length))+geom_point()+
xlab("Year")+ylab("Length of growing season (days)")+
facet_wrap(~Month, scales = "free_y")+
theme_classic()+stat_smooth(colour="red",se=FALSE, size=0.5, method = "lm")
#subset only positive temps
Temp.pos<-subset(TempPrecip, Temp_avg > 0)
#get length of growing season by month and year
Growing.month.season<-ddply(Temp.pos, .(Year, Month), .fun= summarise, length=length(Temp_avg))
Growing.year.season<-ddply(Growing.month.season, .(Year), .fun= summarise, length.year=sum(length))
Growing.season.month.plot<-ggplot(Growing.month.season, aes(x = Year, y = length))+geom_point()+
xlab("Year")+ylab("Length of growing season (days)")+
facet_wrap(~Month, scales = "free_y")+
theme_classic()+stat_smooth(colour="red",se=FALSE, size=0.5, method = "lm")
Growing.season.month.plot
View(Growing.month.season)
#keep relevant columns
TempPrecip<-TempPrecip[,c("Time", "Temp_avg", "Year", "Week")]
#take mean by week
TempPrecipMeanWeek<-ddply(TempPrecip, .(Year, Week), .fun= summarise, meanweektemp=mean(Temp_avg))
View(TempPrecipMeanWeek)
#determine if week temp is above zero
TempPrecipMeanWeek<-ddply(TempPrecipMeanWeek, .(), .fun= transform, positive = ifelse(meanweektemp> 0,"Y","N"))
#count how many weeks per year were greater than zero
TempPrecipWeekGS<-ddply(TempPrecipMeanWeek, .(Year), .fun= summarize, growweeks = length(positive[positive=="Y"]))
View(TempPrecipWeekGS)
TempPrecipWeekGShighlight<-TempPrecipWeekGS[TempPrecipWeekGS$Year %in% c("1917", "2017")]
TempPrecipWeekGShighlight<-TempPrecipWeekGS[TempPrecipWeekGS$Year %in% c("1917", "2017"),]
View(TempPrecipWeekGShighlight)
TempPrecipWeekGShighlight<-TempPrecipWeekGS[TempPrecipWeekGS$Year %in% c("1917", "2016"),]
Figure.7<-ggplot()+geom_point(TempPrecipWeekGS, aes(x = Year, y = growweeks),colour="grey", alpha = .3)+
geom_point(data=highlight, colour="red")+
theme_minimal()
Figure.7<-ggplot(TempPrecipWeekGS, aes(x = Year, y = growweeks),colour="grey", alpha = .3)+
geom_point(data=highlight, colour="red")+
theme_minimal()
Figure.7<-ggplot(TempPrecipWeekGS, aes(x = Year, y = growweeks),colour="grey", alpha = .3)+
geom_point(data=TempPrecipWeekGShighlight, colour="red")+
theme_minimal()
Figure.7
#plot time series
Figure.7<-ggplot(TempPrecipWeekGS, aes(x = Year, y = growweeks),colour="grey", alpha = .3)+
geom_point()+
geom_point(data=TempPrecipWeekGShighlight, colour="red")+
theme_minimal()
Figure.7
Figure.7<-ggplot(TempPrecipWeekGS, aes(x = Year, y = growweeks, colour="grey", alpha = .3))+
geom_point()+
geom_point(data=TempPrecipWeekGShighlight, colour="red")+
theme_minimal()
Figure.7
Figure.7<-ggplot(TempPrecipWeekGS, aes(x = Year, y = growweeks))+
geom_point(aes(colour="grey", alpha = .3))
Figure.7
Figure.7<-ggplot(TempPrecipWeekGS, aes(x = Year, y = growweeks))+
geom_point(colour="grey", aes(alpha = .3))
Figure.7
Figure.7<-ggplot(TempPrecipWeekGS, aes(x = Year, y = growweeks))+
geom_point(colour="grey", aes(alpha = .3))+
geom_point(data=TempPrecipWeekGShighlight, colour="red")+
theme_minimal()
Figure.7
Figure.7<-ggplot(TempPrecipWeekGS, aes(x = Year, y = growweeks))+
geom_point(colour="grey", aes(alpha = .3))+
geom_point(data=TempPrecipWeekGShighlight, colour="red")+
theme_minimal()+
xlab("Year")+
ylab("Number of weeks with mean positive temperatures")+
stat_smooth(colour="black",se=FALSE, size=0.5, method = "lm")+
theme(panel.border = element_rect(colour = "black", fill=NA), axis.text.y=element_blank(), axis.text.x=element_blank(),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(legend.position="bottom")+
theme(legend.title = element_blank())
Figure.7
Figure.7<-ggplot(TempPrecipWeekGS, aes(x = Year, y = growweeks))+
geom_point(colour="grey", aes(alpha = .3))+
geom_point(data=TempPrecipWeekGShighlight, colour="red")+
theme_minimal()+
xlab("Year")+
ylab("Number of weeks with mean positive temperatures")+
stat_smooth(colour="black",se=FALSE, size=0.5, method = "lm")+
theme(panel.border = element_rect(colour = "black", fill=NA), axis.text.y=element_blank(),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(legend.position="bottom")+
theme(legend.title = element_blank())
Figure.7
Figure.7<-ggplot(TempPrecipWeekGS, aes(x = Year, y = growweeks))+
geom_point(colour="grey", aes(alpha = .3))+
geom_point(data=TempPrecipWeekGShighlight, colour="red")+
theme_minimal()+
xlab("Year")+
ylab("Number of weeks with mean positive temperatures")+
stat_smooth(colour="black",se=FALSE, size=0.5, method = "lm")+
theme(panel.border = element_rect(colour = "black", fill=NA),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(legend.position="bottom")+
theme(legend.title = element_blank())+
theme(legend.position="none")
Figure.7
View(TempPrecip)
TempPrecip<-read.csv("TempPrecipAvg.csv", stringsAsFactors = FALSE)
#### prep data ####
#set working directory
setwd("~/Box Sync/Post-Doc/Swedish plants")
#read in data
TempPrecip<-read.csv("TempPrecipAvg.csv", stringsAsFactors = FALSE)
#convert blank precipitation to 0
TempPrecip$Precipitation[TempPrecip$Precipitation==""] <- 0
#convert n/a to NA
TempPrecip[TempPrecip == "n/a" ] <- NA
#convert odd entries to NA
TempPrecip[TempPrecip == "." ] <- NA
TempPrecip[TempPrecip == "?" ] <- NA
#coerce factors to numbers
TempPrecip$Precipitation <- as.numeric(as.character(TempPrecip$Precipitation))
#code in date
TempPrecip$Date <- TempPrecip$Time
TempPrecip$Time <- ymd(TempPrecip$Time)
TempPrecip$Year <- year(TempPrecip$Time)
TempPrecip$Month <- month(TempPrecip$Time)
TempPrecip$Day <- day(TempPrecip$Day)
TempPrecip$Week<-week(TempPrecip$Time)
TempPrecipPositive<-ddply(TempPrecip, .(), .fun= transform, positive = ifelse(Temp_avg> 0,"Y","N"))
View(TempPrecipPositive)
TempPrecipPositive<-ddply(TempPrecipPositive, .(Year), .fun= summarize, growdays = length(positive[positive=="Y"]))
TempPrecipPositivehighlight<-TempPrecipPositive[TempPrecipPositive$Year %in% c("1918", "2016"),]
#subset years of interest (1918, 2016)
TempPrecipPositivehighlight<-TempPrecipPositive[TempPrecipPositive$Year %in% c("1918", "2016"),]
#plot time series
PositiveDaysPloy<-ggplot(TempPrecipPositive, aes(x = Year, y = growdays))+
geom_point(colour="grey", aes(alpha = .3))+
geom_point(data=TempPrecipPositivehighlight, colour="red")+
theme_minimal()+
xlab("Year")+
ylab("Number of days with positive temperatures")+
stat_smooth(colour="black",se=FALSE, size=0.5, method = "lm")+
theme(panel.border = element_rect(colour = "black", fill=NA),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(legend.position="bottom")+
theme(legend.title = element_blank())+
theme(legend.position="none")
PositiveDaysPlot<-ggplot(TempPrecipPositive, aes(x = Year, y = growdays))+
geom_point(colour="grey", aes(alpha = .3))+
geom_point(data=TempPrecipPositivehighlight, colour="red")+
theme_minimal()+
xlab("Year")+
ylab("Number of days with positive temperatures")+
stat_smooth(colour="black",se=FALSE, size=0.5, method = "lm")+
theme(panel.border = element_rect(colour = "black", fill=NA),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(legend.position="bottom")+
theme(legend.title = element_blank())+
theme(legend.position="none")
PositiveDaysPlot
help(lm)
PositiveWeeklm<-lm(Year~growweeks)
PositiveWeeklm<-lm(growweeks~Year,TempPrecipWeekGS)
PositiveWeeklm
summary(PositiveWeeklm)
PositiveDayslm<-lm(growdays~Year,TempPrecipPositive)
summary(PositiveDayslm)
TempPrecipSnow<-ddply(TempPrecip, .(), .fun= transform,snow = ifelse(Temp_avg< 0 & Precipitation >0 ,"Y","N"))
View(TempPrecipSnow)
TempPrecipSnow<-ddply(TempPrecipSnow, .(Year,Month), summarise, snow.days = length(snow[snow=="Y"]))
View(TempPrecipWeekGS)
TempPrecipSnowYear<-ddply(TempPrecipSnow, .(Year), summarise, snow.days.year = sum(snow.days))
View(TempPrecipSnowYear)
TempPrecipSnowYearhighlight<-TempPrecipSnowYear[TempPrecipSnowYear$Year %in% c("1918", "2016"),]
SnowPlot<-ggplot(TempPrecipSnowYear, aes(x = Year, y = snow.days.year))+
geom_point(colour="grey", aes(alpha = .3))+
geom_point(data=TempPrecipSnowYearhighlight, colour="red")+
theme_minimal()+
xlab("Year")+
ylab("Number of days precipitation fell as snow")+
stat_smooth(colour="black",se=FALSE, size=0.5, method = "lm")+
theme(panel.border = element_rect(colour = "black", fill=NA),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(legend.position="bottom")+
theme(legend.title = element_blank())+
theme(legend.position="none")
SnowPlot
Snowlm<-lm(snow.days.year~Year,TempPrecipSnowYear)
summary(Snowlm)
PositiveDaysPlot
